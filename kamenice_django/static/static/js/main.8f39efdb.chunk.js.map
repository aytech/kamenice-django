{"version":3,"sources":["lib/components/CsCalendarLocale.ts","sections/AppHeader/assets/mill.svg","sections/AppHeader/index.tsx","index.tsx","sections/Home/index.tsx"],"names":["CsCalendarLocale","months","weekDays","name","short","isWeekend","weekStartingIndex","getToday","gregorainTodayObject","toNativeDate","date","Date","year","month","day","getMonthLength","getDate","transformDigit","digit","nextMonth","previousMonth","openMonthSelector","openYearSelector","closeMonthSelector","closeYearSelector","defaultPlaceholder","from","to","digitSeparator","yearLetterSkip","isRtl","AppHeader","withRouter","location","history","useState","search","className","src","logo","alt","placeholder","enterButton","onChange","event","onSearch","value","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","id","offsetTop","exact","path","component","selectedRange","setSelectedRange","selectedDay","formVisible","setFormVisible","level","gutter","map","room","span","range","locale","shouldHighlightWeekends","title","visible","onOk","onCancel","dayValue","inputPlaceholder","document","getElementById"],"mappings":"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","file":"static/js/main.8f39efdb.chunk.js","sourcesContent":["import { Locale } from \"react-modern-calendar-datepicker\";\r\n\r\nexport const CsCalendarLocale: Locale = {\r\n  months: [\r\n    'Leden',\r\n    'Únor',\r\n    'Březen',\r\n    'Duben',\r\n    'Květen',\r\n    'Červen',\r\n    'Červenec',\r\n    'Srpen',\r\n    'Září',\r\n    'Říjen',\r\n    'Listopad',\r\n    'Prosinec'\r\n  ],\r\n  weekDays: [\r\n    {\r\n      name: 'Neděle', // used for accessibility \r\n      short: 'Ned', // displayed at the top of days' rows\r\n      isWeekend: true, // is it a formal weekend or not?\r\n    },\r\n    {\r\n      name: 'Pondělí',\r\n      short: 'Pon',\r\n    },\r\n    {\r\n      name: 'Úterý',\r\n      short: 'Út',\r\n    },\r\n    {\r\n      name: 'Středa',\r\n      short: 'St',\r\n    },\r\n    {\r\n      name: 'Čtvrtek',\r\n      short: 'Čt',\r\n    },\r\n    {\r\n      name: 'Pátek',\r\n      short: 'Pá',\r\n    },\r\n    {\r\n      name: 'Sobota',\r\n      short: 'Sob',\r\n      isWeekend: true,\r\n    }\r\n  ],\r\n  weekStartingIndex: 0,\r\n  // return a { year: number, month: number, day: number } object\r\n  getToday(gregorainTodayObject) {\r\n    return gregorainTodayObject;\r\n  },\r\n  // return a native JavaScript date here\r\n  toNativeDate(date) {\r\n    return new Date(date.year, date.month - 1, date.day);\r\n  },\r\n  // return a number for date's month length\r\n  getMonthLength(date) {\r\n    return new Date(date.year, date.month, 0).getDate();\r\n  },\r\n  // return a transformed digit to your locale\r\n  transformDigit(digit) {\r\n    return digit;\r\n  },\r\n  // texts in the date picker\r\n  nextMonth: 'Příští Měsíc',\r\n  previousMonth: 'Předchozí Měsíc',\r\n  openMonthSelector: 'Otevřít Výběr Měsíce',\r\n  openYearSelector: 'Otevřít Výběr Roku',\r\n  closeMonthSelector: 'Zavřít Výběr Měsíce',\r\n  closeYearSelector: 'Zavřít Výběr Roku',\r\n  defaultPlaceholder: 'Vybrat...',\r\n  // for input range value\r\n  from: 'od',\r\n  to: 'do',\r\n  // used for input value when multi dates are selected\r\n  digitSeparator: ',',\r\n  // if your provide -2 for example, year will be 2 digited\r\n  yearLetterSkip: 0,\r\n  // is your language rtl or ltr?\r\n  isRtl: false\r\n}","export default __webpack_public_path__ + \"static/media/mill.1f872c17.svg\";","import React, { useState } from 'react'\r\nimport { Link, RouteComponentProps, withRouter } from 'react-router-dom'\r\nimport Search from 'antd/lib/input/Search'\r\nimport { Header } from 'antd/lib/layout/layout'\r\nimport './styles.css'\r\nimport logo from './assets/mill.svg'\r\n\r\nexport const AppHeader = withRouter(({ location, history }: RouteComponentProps) => {\r\n\r\n  const [ search, setSearch ] = useState(\"\")\r\n\r\n  return (\r\n    <Header className=\"app-header\">\r\n      <div className=\"app-header__logo-search-section\">\r\n        <div className=\"app-header__logo\">\r\n          <Link to=\"/\">\r\n            {/* <img src=\"https://via.placeholder.com/32\" alt=\"Kamenice logo\" /> */ }\r\n            <img src={ logo } alt=\"Kamenice logo\" />\r\n          </Link>\r\n        </div>\r\n        <div className=\"app-header__search-input\">\r\n          <Search\r\n            placeholder=\"\"\r\n            enterButton\r\n            onChange={ event => () => { } }\r\n            onSearch={ () => { } }\r\n            value={ search }\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"app-header__menu-section\">\r\n        {/* <MenuItems viewer={ viewer } setViewer={ setViewer } /> */ }\r\n      </div>\r\n    </Header>\r\n  )\r\n})","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom'\nimport './index.css'\nimport { Affix, Layout } from 'antd'\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'\nimport { AppHeader, Home } from './sections'\n\nconst client = new ApolloClient({\n  uri: \"/api\",\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n  <ApolloProvider client={ client }>\n    <Router>\n      <Layout id=\"app\">\n        <Affix offsetTop={ 0 } className=\"app__affix-header\">\n          <AppHeader />\n        </Affix>\n        <Switch>\n          <Route exact path=\"/\" component={ Home } />\n        </Switch>\n      </Layout>\n    </Router>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n","import React, { useState } from 'react'\nimport { Content } from 'antd/lib/layout/layout'\nimport Title from 'antd/lib/typography/Title'\nimport { Col, Modal, Row } from 'antd'\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\"\nimport DatePicker, { Calendar, DayRange, DayValue } from 'react-modern-calendar-datepicker'\nimport './styles.css'\nimport { CsCalendarLocale } from '../../lib/components/CsCalendarLocale'\n\nexport const Home = () => {\n  const rooms = [\n    {\n      id: 1,\n      name: \"Apartman 2 + 2\"\n    },\n    {\n      id: 2,\n      name: \"Apartman 2 + 2\"\n    },\n    {\n      id: 3,\n      name: \"Apartman 2 + 2\"\n    },\n    {\n      id: 4,\n      name: \"Apartman 2 + 4\"\n    }\n  ]\n  const [ selectedRange, setSelectedRange ] = useState<DayRange>({\n    from: null,\n    to: null\n  })\n  const [ selectedDay, setSelectedDay ] = useState<DayValue>()\n  const [ formVisible, setFormVisible ] = useState<boolean | undefined>(false)\n  return (\n    <Content className=\"home\">\n      <div className=\"home__listings\">\n        <Title level={ 3 } className=\"home__listings-title\">\n          Rezervace / Obsazenost\n        </Title>\n        <Row gutter={ 12 }>\n          {\n            rooms.map((room) => {\n              return (\n                <Col span={ 12 } key={ room.id } className=\"home__listing\">\n                  <Title level={ 4 } className=\"home__listings-title\"> { room.name }</Title>\n                  <div className=\"home__calendar\">\n                    <Calendar\n                      value={ selectedRange }\n                      onChange={ (range: DayRange) => {\n                        setSelectedRange({\n                          from: range.from,\n                          to: null\n                        })\n                        setFormVisible(true)\n                      } }\n                      locale={ CsCalendarLocale }\n                      shouldHighlightWeekends />\n                  </div>\n                </Col>\n              )\n            })\n          }\n        </Row>\n      </div>\n      <Modal\n        title=\"Rezervační formulář\"\n        visible={ formVisible }\n        onOk={ () => setFormVisible(false) }\n        onCancel={ () => setFormVisible(false) }>\n        <DatePicker\n          value={ selectedDay }\n          onChange={ (dayValue: DayValue) => {\n            setSelectedRange({\n              from: selectedRange.from,\n              to: dayValue\n            })\n          } }\n          inputPlaceholder=\"Select a day\"\n          shouldHighlightWeekends />\n      </Modal>\n    </Content >\n  );\n}"],"sourceRoot":""}